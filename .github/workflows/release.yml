name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test ./...

    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Extract changelog for this version
        if [ -f CHANGELOG.md ]; then
          # Get changelog section for this version
          sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
          if [ ! -s release_notes.md ]; then
            echo "## Changes in $VERSION" > release_notes.md
            echo "Please see the full changelog for details." >> release_notes.md
          fi
        else
          echo "## Release $VERSION" > release_notes.md
          echo "New release of E-commerce Engine" >> release_notes.md
        fi

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.changelog.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  publish:
    runs-on: ubuntu-latest
    needs: release
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.22

    - name: Publish to Go Proxy
      run: |
        # The Go proxy will automatically index the module when it's requested
        # We can trigger this by making a request to the proxy
        VERSION=${GITHUB_REF#refs/tags/}
        MODULE_PATH=$(go list -m)
        curl -f "https://proxy.golang.org/${MODULE_PATH}/@v/${VERSION}.info" || true
        echo "Module published to Go proxy: ${MODULE_PATH}@${VERSION}"